Avalia√ß√£o Final do M√≥dulo
Agora que entendemos um pouco mais sobre Typescript, Programa√ß√£o
Orientada a Objetos e seus pilares, vamos avaliar o que aprendemos
juntando tudo! O objetivo desta avalia√ß√£o √© verificar se atingimos os
conhecimentos para avan√ßar para o pr√≥ximo m√≥dulo üí™.
Cen√°rio
A Growdev decidiu inovar mais uma vez e ir√° lan√ßar sua pr√≥pria rede
social estilo Twitter: o GrowTwitter. O objetivo desta ferramenta √© permitir
que usu√°rios possam interagir com outros usu√°rios atrav√©s de algumas
funcionalidades.

Voc√™ ser√° respons√°vel por desenvolver a camada back-end do
GrowTwitter usando as tecnologias que aprendemos no m√≥dulo:
Typescript + POO e seus pilares üíª.

Nesta camada, dever√° ser poss√≠vel cadastrar usu√°rios. Cada usu√°rio
poder√° criar tweets, seguir outros usu√°rios (mecanismo de followers),
al√©m de curtir tweets de outros usu√°rios e/ou respond√™-los com tweets do
tipo ‚Äúreply‚Äù.

Requisitos
Para o desenvolvimento deste projeto ser√° necess√°rio:

1. Criar um projeto Node.js com o Typescript configurado;
2. Criar classes para representar as entidades necess√°rias;
a. Cada classe deve estar em um arquivo separado.
3. Usar todos os pilares da POO pelo menos uma vez;
4. Estabelecer relacionamentos do tipo composi√ß√£o entre as classes;
5. Armazenar os dados em um banco de dados em mem√≥ria (listas).
6. Para testes, criar pelo menos 3 usu√°rios, 3 tweets, 3 likes e 3 replies.

Propriedades
Os usu√°rios e tweets devem ser representados com pelo menos as
seguintes propriedades:

Classe Propriedades
User ‚óè Identificador √∫nico

‚óè Nome
‚óè E-mail
‚óè Username
‚óè Senha
Tweet ‚óè Identificador
‚óè Conte√∫do
‚óè Tipo

Features
Realize o desenvolvimento das seguintes features para cumprir com os
requisitos da avalia√ß√£o:

Feature #1 Cadastro de usu√°rios

Deve ser poss√≠vel criar usu√°rios na aplica√ß√£o.
Os campos ID e Username devem ser √∫nicos por
usu√°rio, sendo que o ID pode ser gerado
automaticamente pela aplica√ß√£o.

Feature #2 Cadastro de tweets

Deve ser poss√≠vel criar tweets por usu√°rio. Cada
usu√°rio poder√° criar N tweets e um tweet pertence a
somente um usu√°rio (relacionamento 0-N).

O campo ID deve ser √∫nico e pode ser gerado
automaticamente pela aplica√ß√£o.
Cada tweet possui um tipo obrigat√≥rio (normal ou
reply).

Feature #3 Exibi√ß√£o de tweets

Deve ser poss√≠vel exibir um tweet na aplica√ß√£o. Como
estamos no back-end, utilize o console.log( ).
A exibi√ß√£o de um tweet deve ser feita da seguinte
forma:

@<username>: <conte√∫do>

<likes> *
<replies> *

Exemplo:

* verificar features #7 e #8 para maiores
informa√ß√µes sobre exibi√ß√£o de likes e replies.

Feature #4 Followers

Deve ser poss√≠vel para um usu√°rio seguir outro
usu√°rio, exceto a si mesmo.
O usu√°rio deve ter acesso a lista de usu√°rio a quem
segue.

Feature #5 Like em tweets

Deve ser poss√≠vel para um usu√°rio curtir os tweets de
outros usu√°rios.
Um tweet (normal ou reply) pode ter 0 ou N curtidas.

Feature #6 Reply em tweets

Deve ser poss√≠vel para um usu√°rio responder a tweets
de outros usu√°rios.
A resposta a um tweet deve ser um novo tweet com o
tipo ‚Äúreply‚Äù.

Um tweet (normal ou reply) pode ter 0 ou N replies.

Feature #7 Exibi√ß√£o de tweets com likes

Deve ser poss√≠vel exibir tweets com a informa√ß√£o de
seus likes recebidos.

@<username>: <conte√∫do>

<likes>

A exibi√ß√£o dos likes varia dependendo da quantidade:
‚óè Sem like - n√£o exibir.
‚óè 1 like ‚Äì ‚Äú@<username> curtiu‚Äù.
‚óè 2 ou + likes ‚Äì ‚Äú@<username1> e mais X
usu√°rios curtiram‚Äù.
Exemplo:

Feature #8 Exibi√ß√£o de tweets com replies

Deve ser poss√≠vel exibir tweets com os seus replies.

@<username>: <conte√∫do>

<replies>

Adicione um indicador ao in√≠cio do reply para indicar
que se trata de uma resposta (p.ex. o caractere ‚Äú>‚Äù).

@username: conte√∫do do tweet original.
> @username2: conte√∫do do reply 1.
> @username3: conte√∫do do reply 2.

Exemplo:

Feature #9 Feed de tweets

Um usu√°rio poder√° exibir o seu feed de tweets. O feed
√© composto por seus tweets e pelos tweets dos
usu√°rios a quem segue.
Na exibi√ß√£o do feed, cada tweet dever√° ser exibido
conforme features anteriores: com seu conte√∫do, seus
likes e replies.
Exemplo:

Entrega
O projeto desenvolvido deve ser postado em sua conta no GitHub e deve
ser disponibilizado na tarefa da atividade final do m√≥dulo no Classroom o
link para o reposit√≥rio.

Para que possamos construir uma base s√≥lida de aprendizado √© preciso
praticar. Bora implementar tudo isso!

Programa√ß√£o Orientada a Objetos
Agora que entendemos um pouco mais
sobre Typescript, Programa√ß√£o Orientada
a Objetos e seus pilares, vamos avaliar o
que aprendemos juntando tudo!
O objetivo desta avalia√ß√£o √© verificar se
atingimos os conhecimentos para avan√ßar
para o pr√≥ximo m√≥dulo.

O que vamos fazer?
GrowTwitter
Aplica√ß√£o de rede social
estilo twitter utilizando os
conceitos de POO no
Typescript.

Vamos criar uma aplica√ß√£o com as seguintes
features:
- Cadastro de usu√°rios;
- Cadastro de tweets por usu√°rios;
- Mecanismo de seguidores entre usu√°rios;
- Likes e replies em tweets.
AVALIA√á√ÉO
GrowTwitter - Requisitos

Aten√ß√£o! Os requisitos tamb√©m est√£o postados em
formato PDF no classroom.
‚Ä¢ Criar um projeto Node.js com
Typescript.
‚Ä¢ Criar classes para as entidades
necess√°rias.
‚Ä¢ Usar os pilares da POO.
‚Ä¢ Estabelecer relacionamentos do tipo
composi√ß√£o.
‚Ä¢ Armazenar os dados em um banco de
dados em mem√≥ria (array).

Informa√ß√µes

‚óè Dados de um usu√°rio:
‚óã Identificador
‚óã Nome
‚óã E-mail
‚óã Username
‚óã Senha

‚óè Dados de um tweet:
‚óã Identificador
‚óã Conte√∫do
‚óã Tipo

Regras - Usu√°rio
Regras para objetos do tipo Usu√°rio:
- Devem ter id e username √∫nicos.
- Podem criar tweets.
- Podem seguir outros usu√°rios.
- Podem curtir e responder (reply) tweets
de outros usu√°rios.
- Podem visualizar os tweets dos usu√°rios a
quem seguem (estilo feed de tweets).

Regras - Tweet
Regras para objetos do tipo Tweet:
- Devem ter id √∫nico.
- Possui um tipo (normal ou reply).
- Devem ser de apenas 1 usu√°rio.
- Podem conter likes e replies.
- Podem ser exibidos conforme regra
estabelecida (ver pr√≥ximos slides).

Regras - Follower
Regras para a feature Follower:
- Um usu√°rio poder√° seguir outro
usu√°rio.
- O usu√°rio que segue outro √© chamado
de Follower.
- Um usu√°rio poder√° ser capaz de
visualizar os tweets de quem est√°
seguindo.

Regras - Like e Reply
Regras para as features Like e Reply:
- Um usu√°rio poder√° responder a um
Tweet espec√≠fico com outro Tweet.
- Um tweet reply conter√° a propriedade
tipo setada como ‚ÄúReply‚Äù.
- Um usu√°rio poder√° curtir um Tweet
espec√≠fico.
- Um tweet pode ter zero ou v√°rios likes
e replies.

Regras - Exibi√ß√£o dos Tweets
Para exibir um tweet, use o console.log( ).
A exibi√ß√£o de um tweet deve ser feita da
seguinte forma:

@<username>: <conte√∫do>

<likes>

<replies>

Regras gerais
- Crie cada classe em um arquivo separado.
- Fa√ßa o(s) arquivo(s) de banco de dados em
arquivos separados.
- Crie um arquivo de partida (index.ts) para a
aplica√ß√£o com testes das features desenvolvidas.
- Crie pelo menos 3 usu√°rios, 3 tweets, 3 likes e 3
replies no banco de dados.


